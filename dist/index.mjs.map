{"version":3,"sources":["../src/index.ts"],"sourcesContent":["import { registerSharedWorker, SharedWorker } from \"ava/plugin\"\nimport hash from \"object-hash\"\nimport path from \"node:path\"\nimport {\n  ConnectionDetailsFromWorker,\n  FinishedRunningBeforeTemplateIsBakedHookMessage,\n  InitialWorkerData,\n  MessageFromWorker,\n  MessageToWorker,\n} from \"./internal-types\"\nimport {\n  ConnectionDetails,\n  GetTestPostgresDatabase,\n  GetTestPostgresDatabaseFactoryOptions,\n  GetTestPostgresDatabaseOptions,\n  GetTestPostgresDatabaseResult,\n} from \"./public-types\"\nimport { Pool } from \"pg\"\nimport { Jsonifiable } from \"type-fest\"\nimport { StartedNetwork } from \"testcontainers\"\n\nconst mapWorkerConnectionDetailsToConnectionDetails = (\n  connectionDetailsFromWorker: ConnectionDetailsFromWorker\n): ConnectionDetails => ({\n  ...connectionDetailsFromWorker,\n  networkDocker: new StartedNetwork(\n    connectionDetailsFromWorker.networkDocker.id,\n    connectionDetailsFromWorker.networkDocker.options\n  ),\n  pool: new Pool({\n    connectionString: connectionDetailsFromWorker.connectionString,\n  }),\n})\n\nconst getWorker = async (\n  initialData: InitialWorkerData,\n  options?: GetTestPostgresDatabaseFactoryOptions<any>\n) => {\n  const key = hash({\n    initialData,\n    key: options?.key,\n  })\n\n  if (process.env.IS_TESTING_AVA_POSTGRES) {\n    const { registerSharedTypeScriptWorker } = await import(\n      \"ava-typescript-worker\"\n    )\n    return registerSharedTypeScriptWorker({\n      filename: new URL(\n        `file:${path.resolve(__dirname, \"worker-wrapper.ts\")}#${key}`\n      ),\n      initialData: initialData as any,\n    })\n  }\n\n  return registerSharedWorker({\n    filename: new URL(\n      `file:${path.resolve(__dirname, \"worker-wrapper.mjs\")}#${key}`\n    ),\n    initialData: initialData as any,\n    supportedProtocols: [\"ava-4\"],\n  })\n}\n\nexport const getTestPostgresDatabaseFactory = <\n  Params extends Jsonifiable = never\n>(\n  options?: GetTestPostgresDatabaseFactoryOptions<Params>\n) => {\n  const initialData: InitialWorkerData = {\n    postgresVersion: options?.postgresVersion ?? \"14\",\n    containerOptions: options?.container,\n  }\n\n  const workerPromise = getWorker(initialData, options as any)\n\n  const getTestPostgresDatabase: GetTestPostgresDatabase<Params> = async (\n    params: any,\n    getTestDatabaseOptions?: GetTestPostgresDatabaseOptions\n  ) => {\n    const worker = await workerPromise\n    await worker.available\n\n    const waitForAndHandleReply = async (\n      message: SharedWorker.Plugin.PublishedMessage\n    ): Promise<GetTestPostgresDatabaseResult> => {\n      let reply = await message.replies().next()\n      const replyData: MessageFromWorker = reply.value.data\n\n      if (replyData.type === \"RUN_HOOK_BEFORE_TEMPLATE_IS_BAKED\") {\n        let result: FinishedRunningBeforeTemplateIsBakedHookMessage[\"result\"] =\n          {\n            status: \"success\",\n            result: undefined,\n          }\n\n        if (options?.beforeTemplateIsBaked) {\n          const connectionDetails =\n            mapWorkerConnectionDetailsToConnectionDetails(\n              replyData.connectionDetails\n            )\n\n          // Ignore if the pool is terminated by the shared worker\n          // (This happens in CI for some reason even though we drain the pool first.)\n          connectionDetails.pool.on(\"error\", (error) => {\n            if (\n              error.message.includes(\n                \"terminating connection due to administrator command\"\n              )\n            ) {\n              return\n            }\n\n            throw error\n          })\n\n          try {\n            const hookResult = await options.beforeTemplateIsBaked({\n              params,\n              connection: connectionDetails,\n              containerExec: async (command) => {\n                const request = reply.value.reply({\n                  type: \"EXEC_COMMAND_IN_CONTAINER\",\n                  command,\n                })\n\n                reply = await request.replies().next()\n\n                if (\n                  reply.value.data.type !== \"EXEC_COMMAND_IN_CONTAINER_RESULT\"\n                ) {\n                  throw new Error(\n                    \"Expected EXEC_COMMAND_IN_CONTAINER_RESULT message\"\n                  )\n                }\n\n                return reply.value.data.result\n              },\n            })\n\n            result = {\n              status: \"success\",\n              result: hookResult,\n            }\n          } catch (error) {\n            result = {\n              status: \"error\",\n              error:\n                error instanceof Error\n                  ? error.stack ?? error.message\n                  : new Error(\n                      \"Unknown error type thrown in beforeTemplateIsBaked hook\"\n                    ),\n            }\n          } finally {\n            await connectionDetails.pool.end()\n          }\n        }\n\n        return waitForAndHandleReply(\n          reply.value.reply({\n            type: \"FINISHED_RUNNING_HOOK_BEFORE_TEMPLATE_IS_BAKED\",\n            result,\n          } as MessageToWorker)\n        )\n      } else if (replyData.type === \"GOT_DATABASE\") {\n        if (replyData.beforeTemplateIsBakedResult.status === \"error\") {\n          if (typeof replyData.beforeTemplateIsBakedResult.error === \"string\") {\n            throw new Error(replyData.beforeTemplateIsBakedResult.error)\n          }\n\n          throw replyData.beforeTemplateIsBakedResult.error\n        }\n\n        return {\n          ...mapWorkerConnectionDetailsToConnectionDetails(\n            replyData.connectionDetails\n          ),\n          beforeTemplateIsBakedResult:\n            replyData.beforeTemplateIsBakedResult.result,\n        }\n      }\n\n      throw new Error(`Unexpected message type: ${replyData.type}`)\n    }\n\n    return waitForAndHandleReply(\n      worker.publish({\n        type: \"GET_TEST_DATABASE\",\n        params,\n        key: getTestDatabaseOptions?.key,\n      } as MessageToWorker)\n    )\n  }\n\n  return getTestPostgresDatabase\n}\n\nexport * from \"./public-types\"\n"],"mappings":"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","names":[]}