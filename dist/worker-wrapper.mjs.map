{"version":3,"sources":["../src/worker.ts","../src/lib/get-random-database-name.ts","../src/worker-wrapper.ts"],"sourcesContent":["import pg from \"pg\"\nimport { GenericContainer, Network } from \"testcontainers\"\nimport { Mutex } from \"async-mutex\"\nimport hash from \"object-hash\"\nimport {\n  GotDatabaseMessage,\n  InitialWorkerData,\n  MessageFromWorker,\n  MessageToWorker,\n  WorkerMessage,\n} from \"./internal-types\"\nimport getRandomDatabaseName from \"./lib/get-random-database-name\"\nimport { SharedWorker } from \"ava/plugin\"\nimport { parentPort } from \"node:worker_threads\"\n\nexport class Worker {\n  private paramsHashToTemplateCreationPromise = new Map<\n    string,\n    ReturnType<typeof this.createTemplate>\n  >()\n  private keyToDatabaseName = new Map<string, string>()\n  private keyToCreationMutex = new Map<string, Mutex>()\n  private getOrCreateKeyToCreationMutex = new Mutex()\n  private createdDatabasesByTestWorkerId = new Map<string, string[]>()\n  private getOrCreateTemplateNameMutex = new Mutex()\n\n  private startContainerPromise: ReturnType<typeof this.startContainer>\n\n  constructor(private initialData: InitialWorkerData) {\n    this.startContainerPromise = this.startContainer()\n  }\n\n  public async handleTestWorker(testWorker: SharedWorker.TestWorker<unknown>) {\n    testWorker.teardown(async () => {\n      await this.handleTestWorkerTeardown(testWorker)\n    })\n\n    for await (const message of testWorker.subscribe()) {\n      await this.handleMessage(message as any)\n    }\n  }\n\n  public async handleMessage(\n    message: SharedWorker.ReceivedMessage<WorkerMessage>\n  ) {\n    if (message.data.type === \"GET_TEST_DATABASE\") {\n      // Get template name\n      const paramsHash = hash(message.data.params ?? null)\n      let neededToCreateTemplate = false\n      // (Mutex avoids race conditions where two identical templates get built)\n      await this.getOrCreateTemplateNameMutex.runExclusive(() => {\n        if (!this.paramsHashToTemplateCreationPromise.has(paramsHash)) {\n          neededToCreateTemplate = true\n          this.paramsHashToTemplateCreationPromise.set(\n            paramsHash,\n            this.createTemplate(message)\n          )\n        }\n      })\n      const {\n        templateName,\n        beforeTemplateIsBakedResult,\n        lastMessage: lastMessageFromTemplateCreation,\n      } = await this.paramsHashToTemplateCreationPromise.get(paramsHash)!\n\n      // Create database using template\n      const { postgresClient } = await this.startContainerPromise\n\n      // Only relevant when a `key` is provided\n      const fullDatabaseKey = `${paramsHash}-${message.data.key}`\n\n      let databaseName = message.data.key\n        ? this.keyToDatabaseName.get(fullDatabaseKey)\n        : undefined\n      if (!databaseName) {\n        const createDatabase = async () => {\n          databaseName = getRandomDatabaseName()\n          await postgresClient.query(\n            `CREATE DATABASE ${databaseName} WITH TEMPLATE ${templateName};`\n          )\n          this.createdDatabasesByTestWorkerId.set(\n            message.testWorker.id,\n            (\n              this.createdDatabasesByTestWorkerId.get(message.testWorker.id) ??\n              []\n            ).concat(databaseName)\n          )\n        }\n\n        if (message.data.key) {\n          await this.getOrCreateKeyToCreationMutex.runExclusive(() => {\n            if (!this.keyToCreationMutex.has(fullDatabaseKey)) {\n              this.keyToCreationMutex.set(fullDatabaseKey, new Mutex())\n            }\n          })\n\n          const mutex = this.keyToCreationMutex.get(fullDatabaseKey)!\n\n          await mutex.runExclusive(async () => {\n            if (!this.keyToDatabaseName.has(fullDatabaseKey)) {\n              await createDatabase()\n              this.keyToDatabaseName.set(fullDatabaseKey, databaseName!)\n            }\n\n            databaseName = this.keyToDatabaseName.get(fullDatabaseKey)!\n          })\n        } else {\n          await createDatabase()\n        }\n      }\n\n      const gotDatabaseMessage: GotDatabaseMessage = {\n        type: \"GOT_DATABASE\",\n        connectionDetails: await this.getConnectionDetails(databaseName!),\n        beforeTemplateIsBakedResult,\n      }\n\n      if (neededToCreateTemplate) {\n        lastMessageFromTemplateCreation.value.reply(gotDatabaseMessage)\n      } else {\n        message.reply(gotDatabaseMessage)\n      }\n\n      return\n    }\n\n    throw new Error(`Unknown message: ${JSON.stringify(message.data)}`)\n  }\n\n  private async handleTestWorkerTeardown(\n    testWorker: SharedWorker.TestWorker<unknown>\n  ) {\n    const databases = this.createdDatabasesByTestWorkerId.get(testWorker.id)\n\n    if (databases) {\n      const { postgresClient } = await this.startContainerPromise\n\n      const databasesAssociatedWithKeys = new Set(\n        this.keyToDatabaseName.values()\n      )\n\n      await Promise.all(\n        databases\n          .filter((d) => !databasesAssociatedWithKeys.has(d))\n          .map(async (database) => {\n            await this.forceDisconnectClientsFrom(database)\n            await postgresClient.query(`DROP DATABASE ${database}`)\n          })\n      )\n    }\n  }\n\n  private async createTemplate(\n    message: SharedWorker.ReceivedMessage<WorkerMessage>\n  ) {\n    const databaseName = getRandomDatabaseName()\n\n    // Create database\n    const { postgresClient, container } = await this.startContainerPromise\n    await postgresClient.query(`CREATE DATABASE ${databaseName};`)\n\n    const msg = message.reply({\n      type: \"RUN_HOOK_BEFORE_TEMPLATE_IS_BAKED\",\n      connectionDetails: await this.getConnectionDetails(databaseName),\n    })\n\n    let reply = await msg.replies().next()\n\n    while (\n      reply.value.data.type !== \"FINISHED_RUNNING_HOOK_BEFORE_TEMPLATE_IS_BAKED\"\n    ) {\n      const replyValue = reply.value.data as MessageToWorker\n\n      if (replyValue.type === \"EXEC_COMMAND_IN_CONTAINER\") {\n        const result = await container.exec(replyValue.command)\n        const message = reply.value.reply({\n          type: \"EXEC_COMMAND_IN_CONTAINER_RESULT\",\n          result,\n        } as MessageFromWorker)\n\n        reply = await message.replies().next()\n      }\n    }\n\n    // Disconnect any clients\n    await this.forceDisconnectClientsFrom(databaseName)\n\n    // Convert database to template\n    await postgresClient.query(\n      `ALTER DATABASE ${databaseName} WITH is_template TRUE;`\n    )\n\n    return {\n      templateName: databaseName,\n      beforeTemplateIsBakedResult: reply.value.data.result,\n      lastMessage: reply,\n    }\n  }\n\n  private async forceDisconnectClientsFrom(databaseName: string) {\n    const { postgresClient } = await this.startContainerPromise\n\n    await postgresClient.query(\n      `REVOKE CONNECT ON DATABASE ${databaseName} FROM public`\n    )\n\n    // Nicely ask clients to disconnect\n    await postgresClient.query(`\n      SELECT pid, pg_cancel_backend(pid)\n      FROM pg_stat_activity\n      WHERE datname = '${databaseName}' AND pid <> pg_backend_pid();\n      `)\n\n    // Forcefully disconnect clients\n    await postgresClient.query(`\n      SELECT pid, pg_terminate_backend(pid)\n      FROM pg_stat_activity\n      WHERE datname = '${databaseName}' AND pid <> pg_backend_pid();\n      `)\n  }\n\n  private async getConnectionDetails(databaseName: string) {\n    const { container, network } = await this.startContainerPromise\n    const externalDatabaseUrl = `postgresql://postgres:@${container.getHost()}:${container.getMappedPort(\n      5432\n    )}/${databaseName}`\n\n    return {\n      connectionString: externalDatabaseUrl,\n      connectionStringDocker: `postgresql://postgres:@${container\n        .getName()\n        .replace(\"/\", \"\")}:5432/${databaseName}`,\n      networkDocker: {\n        id: network.getId(),\n        // StartedNetwork.options is private, however we must access it here\n        // using type-safe string index notation for serialization.\n        options: network[\"options\"],\n      },\n      host: container.getHost(),\n      port: container.getMappedPort(5432),\n      database: databaseName,\n      username: \"postgres\",\n      password: \"\",\n    }\n  }\n\n  private async startContainer() {\n    parentPort!.postMessage({\n      type: \"ava-postgres\",\n      message: \"starting container...\",\n      postgresVersion: this.initialData.postgresVersion,\n    })\n\n    const network = await new Network().start()\n\n    parentPort!.postMessage({\n      type: \"ava-postgres\",\n      message: \"stared network\",\n    })\n\n    let container = new GenericContainer(\n      `postgres:${this.initialData.postgresVersion}`\n    )\n      .withExposedPorts(5432)\n      .withName(getRandomDatabaseName())\n      .withEnvironment({\n        POSTGRES_HOST_AUTH_METHOD: \"trust\",\n        PGDATA: \"/var/lib/postgresql/data\",\n      })\n      .withCommand([\n        \"-c\",\n        \"max_connections=1000\",\n        \"-c\",\n        \"fsync=off\",\n        \"-c\",\n        \"synchronous_commit=off\",\n        \"-c\",\n        \"full_page_writes=off\",\n      ])\n      .withTmpFs({ \"/var/lib/postgresql/data\": \"rw\" })\n      .withNetwork(network)\n      .withStartupTimeout(120_000)\n      .withBindMounts(this.initialData.containerOptions?.bindMounts ?? [])\n\n    parentPort!.postMessage({\n      type: \"ava-postgres\",\n      message: \"starting generic container instance...\",\n    })\n\n    const startedContainer = await container.start()\n\n    parentPort!.postMessage({\n      type: \"ava-postgres\",\n      message: \"container started\",\n      port: startedContainer.getMappedPort(5432),\n      host: startedContainer.getHost(),\n    })\n\n    const { exitCode, output } = await startedContainer.exec([\"pg_isready\"])\n    if (exitCode !== 0) {\n      parentPort!.postMessage({\n        type: \"ava-postgres\",\n        message: \"Postgres Container failed to start\",\n        output,\n        exitCode,\n      })\n\n      throw new Error(\n        `pg_isready exited with code ${exitCode} (database container didn't finish starting)`\n      )\n    }\n\n    return {\n      container: startedContainer,\n      network,\n      postgresClient: new pg.Pool({\n        connectionString: `postgresql://postgres:@${startedContainer.getHost()}:${startedContainer.getMappedPort(\n          5432\n        )}/postgres`,\n      }),\n    }\n  }\n}\n","import { customAlphabet } from \"nanoid\"\n\nconst nanoid = customAlphabet(\"1234567890abcdef\", 10)\n\nconst getRandomDatabaseName = () => `test_${nanoid()}`\n\nexport default getRandomDatabaseName\n","import { SharedWorker } from \"ava/plugin\"\nimport { Worker } from \"./worker\"\n\nconst needsToNegotiateProtocol = (\n  arg: SharedWorker.FactoryOptions | SharedWorker.Protocol\n): arg is SharedWorker.FactoryOptions => {\n  return (\n    typeof (arg as SharedWorker.FactoryOptions).negotiateProtocol === \"function\"\n  )\n}\n\nconst workerWrapper = async (\n  arg: SharedWorker.FactoryOptions | SharedWorker.Protocol\n) => {\n  const protocol = needsToNegotiateProtocol(arg)\n    ? arg.negotiateProtocol([\"ava-4\"]).ready()\n    : arg\n\n  const { initialData } = protocol\n\n  const worker = new Worker(initialData as any)\n\n  for await (const testWorker of protocol.testWorkers()) {\n    void worker.handleTestWorker(testWorker)\n  }\n}\n\nexport default workerWrapper\n"],"mappings":"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","names":["message"]}